#include <stdio.h>
#include <vector>

const char* s_files[] =
{
	"built_in.h"
};

int main()
{
	int num_files = (int)sizeof(s_files) / (int)sizeof(const char*);
	FILE *fp = fopen("internal/cuda_inline_headers.hpp", "w");

	fputs("/* This file is generated by pack_headers.cpp */ \n", fp);

	for (int i = 0; i < num_files; i++)
	{
		fprintf(fp, "static char s_filename_%d[]=\"%s\";\n", i, s_files[i]);

		FILE *fheader = fopen(s_files[i], "rb");
		fseek(fheader, 0, SEEK_END);
		size_t size = (size_t)ftell(fheader);
		fseek(fheader, 0, SEEK_SET);
		std::vector<char> buf((size + 4)&(~3));
		fread(buf.data(), 1, size, fheader);
		buf[size] = 0;
		fclose(fheader);

		size_t num_dwords = buf.size() >> 2;
		unsigned *dwords = (unsigned*)buf.data();

		fprintf(fp, "static unsigned s_file_content_%d[]={\n", i);
		for (size_t j = 0; j < num_dwords; j++)
		{
			fprintf(fp, "0x%x,", dwords[j]);
			if (j % 10 == 9)
				fputs("\n", fp);
		}
		fputs("};\n\n", fp);
	}

	fprintf(fp, "static int s_num_headers = %d;\n", num_files);

	fputs("static const char* s_name_headers[] = {\n", fp);
	for (int i = 0; i < num_files; i++)
		fprintf(fp, "s_filename_%d,\n", i);

	fputs("};\n\n", fp);

	fputs("static const char* s_content_headers[] = {\n", fp);
	for (int i = 0; i < num_files; i++)
		fprintf(fp, "(char*)s_file_content_%d,\n", i);

	fputs("};\n\n", fp);

	fclose(fp);

	return 0;
}
